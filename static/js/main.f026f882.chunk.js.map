{"version":3,"sources":["store/index.ts","api/api.ts","App.tsx","index.tsx"],"names":["setOrder","order","type","getSortField","state","sortField","getOrder","getSortedTodos","createSelector","todos","visibleTodos","console","log","sort","a","b","id","localeCompare","completed","user","username","reverse","initialState","store","createStore","action","filter","todo","deleteItem","composeWithDevTools","BASE_URL","TODOS_URL","USERS_URL","getData","Promise","fetch","all","users","json","preparedTodos","preparedUsers","map","find","userId","App","dispatch","useDispatch","useSelector","handleSort","sortBy","setSortField","className","length","onClick","key","title","then","data","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f026f882.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createSelector } from 'reselect';\n\nconst SET_SORT_FIELD = 'SET_SORT_FIELD';\nconst SET_TODOS = 'SET_TODOS';\nconst SET_ORDER = 'SET_ORDER';\nconst DELETE_ITEM = 'DELETE_ITEM';\n\nexport const setSortField = (sortField: string) => ({\n  type: SET_SORT_FIELD,\n  sortField,\n});\n\nexport const setDeleteItem = (deleteItem: number) => ({\n  type: DELETE_ITEM,\n  deleteItem,\n});\n\nexport const setTodos = (todos: Todo[]) => ({\n  type: SET_TODOS,\n  todos,\n});\n\nexport const setOrder = (order: '' | 'ASC' | 'DES') => ({\n  type: SET_ORDER,\n  order,\n});\n\nexport const getSortField = (state: RootState) => state.sortField;\nexport const getTodos = (state: RootState) => state.todos;\nexport const getOrder = (state: RootState) => state.order;\n\nexport const getSortedTodos = createSelector(\n  [\n    getTodos,\n    getSortField,\n    getOrder,\n  ],\n  (todos: Todo[], sortField: string, order: string) => {\n    const visibleTodos = [...todos];\n    console.log(order);\n    switch (sortField) {\n      case 'id':\n        visibleTodos.sort((a, b) => a.id - b.id);\n        break;\n      case 'title':\n        visibleTodos.sort((a, b) => a[sortField].localeCompare(b[sortField]));\n        break;\n      case 'status':\n        visibleTodos.sort((a, b) => +a.completed - +b.completed);\n        break;\n      case 'username':\n        visibleTodos.sort((a: Todo, b: Todo) => {\n          if (a.user && b.user) {\n            return a.user.username.localeCompare(b.user.username);\n          }\n\n          return 0;\n        });\n\n        break;\n      default: break;\n    }\n\n    if (order === 'DES') {\n      visibleTodos.reverse();\n    }\n\n    return visibleTodos;\n  },\n);\n\nexport type RootState = {\n  todos: Todo[];\n  sortField: string;\n  order: '' | 'ASC' | 'DES';\n};\n\nconst initialState: RootState = {\n  todos: [],\n  sortField: 'id',\n  order: '',\n};\n\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_SORT_FIELD:\n      return {\n        ...state,\n        sortField: action.sortField,\n      };\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: action.todos,\n      };\n    case SET_ORDER:\n      return {\n        ...state,\n        order: action.order,\n      };\n    case DELETE_ITEM:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.deleteItem),\n      };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(),\n);\n\nexport default store;\n","const BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\nconst TODOS_URL = `${BASE_URL}/todos.json`;\nconst USERS_URL = `${BASE_URL}/users.json`;\n\nexport const getData = async () => {\n  const [todos, users] = await Promise.all([\n    await fetch(`${TODOS_URL}`),\n    await fetch(`${USERS_URL}`),\n  ]);\n\n  const preparedTodos: Todo[] = await todos.json();\n  const preparedUsers: User[] = await users.json();\n\n  return preparedTodos.map(todo => ({\n    ...todo,\n    user: preparedUsers.find(user => todo.userId === user.id),\n  }));\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getData } from './api/api';\n\nimport './App.scss';\n\nimport {\n  getOrder,\n  getSortedTodos,\n  setDeleteItem,\n  setOrder,\n  setSortField,\n  setTodos,\n  getSortField,\n} from './store';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const visibleTodos = useSelector(getSortedTodos);\n  const order = useSelector(getOrder);\n  const sortField = useSelector(getSortField);\n\n  const handleSort = (sortBy: string) => {\n    if (order === '' || order === 'DES') {\n      dispatch(setOrder('ASC'));\n    } else if (order === 'ASC') {\n      dispatch(setOrder('DES'));\n    }\n\n    if (sortField !== sortBy) {\n      dispatch(setOrder('ASC'));\n    }\n\n    dispatch(setSortField(sortBy));\n  };\n\n\n  return (\n    <div className=\"App\">\n      {!visibleTodos.length ? (<button type=\"button\" onClick={() => getData().then(data => dispatch(setTodos(data)))}>Load</button>) : (\n        <>\n          <h1>Redux list of todos</h1>\n          <table>\n            <thead>\n              <tr>\n                <th>\n                  <button type=\"button\" onClick={() => handleSort('id')}>\n                    Sort by id\n                  </button>\n                </th>\n                <th>\n                  <button type=\"button\" onClick={() => handleSort('username')}>\n                    Sort by name\n                  </button>\n                </th>\n                <th>\n                  <button type=\"button\" onClick={() => handleSort('title')}>\n                    Sort by title\n                  </button>\n                </th>\n                <th>\n                  <button type=\"button\" onClick={() => handleSort('status')}>\n                    Sort by status\n                  </button>\n                </th>\n                <th>Delete</th>\n              </tr>\n            </thead>\n            <tbody>\n              {visibleTodos.map(todo => (\n                <tr key={todo.id}>\n                  <td>{todo.id}</td>\n                  <td>{todo.user?.username}</td>\n                  <td>{todo.title}</td>\n                  <td>{todo.completed ? 'Completed' : 'Active'}</td>\n                  <td>\n                    <button type=\"button\" onClick={() => dispatch(setDeleteItem(todo.id))}>X</button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}